name: Build and Push Devcontainer Image (Pre-Production)
on:
  push:
    branches:
      - main
permissions:
  contents: read
  packages: write
env:
  IMAGE_NAME: ghcr.io/beaniezombie/zombiekit-devcontainer
  VERSION: dev
jobs:
  build-amd64:
    if: github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Trivy Scan (ubuntu:jammy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:jammy'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          scanners: 'vuln'
      - name: Clean up previous image (if exists)
        run: docker rmi ${{ env.IMAGE_NAME }}:amd64 || true
      - name: Build & Push Docker Image (AMD64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max,key=${{ github.sha }}-amd64
      - name: Verify AMD64 Image
        run: docker manifest inspect ${{ env.IMAGE_NAME }}:amd64 || exit 1

  build-arm64:
    if: github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: [self-hosted, linux, ARM64]
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check Docker + Buildx
        run: |
          docker info || { echo "Docker info failed"; exit 1; }
          docker buildx version || { echo "Buildx version check failed"; exit 1; }
          docker buildx inspect || { echo "Buildx inspect failed"; exit 1; }
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Trivy Scan (ubuntu:jammy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:jammy'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          scanners: 'vuln'
      - name: Clean up previous image (if exists)
        run: docker rmi ${{ env.IMAGE_NAME }}:arm64 || true
      - name: Build & Push Docker Image (ARM64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ env.IMAGE_NAME }}:arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max,key=${{ github.sha }}-arm64
      - name: Verify ARM64 Image
        run: docker manifest inspect ${{ env.IMAGE_NAME }}:arm64 || exit 1

  combine-images:
    needs: [build-amd64, build-arm64]
    if: github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Architecture Images with Retry
        run: |
          for i in {1..5}; do
            docker pull --platform linux/amd64 ${{ env.IMAGE_NAME }}:amd64 2>&1 && break || { echo "Retry $i: Failed to pull AMD64 image"; sleep 10; }
          done || { echo "Failed to pull AMD64 image after retries"; exit 1; }
          for i in {1..5}; do
            docker pull --platform linux/arm64 ${{ env.IMAGE_NAME }}:arm64 2>&1 && break || { echo "Retry $i: Failed to pull ARM64 image"; sleep 10; }
          done || { echo "Failed to pull ARM64 image after retries"; exit 1; }
      - name: Verify Architecture Manifests
        run: |
          docker manifest inspect ${{ env.IMAGE_NAME }}:amd64 || { echo "AMD64 image missing"; exit 1; }
          docker manifest inspect ${{ env.IMAGE_NAME }}:arm64 || { echo "ARM64 image missing"; exit 1; }
      - name: Create & Push Multi-Arch Manifest (`:dev`)
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            --amend ${{ env.IMAGE_NAME }}:amd64 \
            --amend ${{ env.IMAGE_NAME }}:arm64 || { echo "Manifest creation failed."; exit 1; }
          for i in {1..3}; do
            docker manifest push --purge ${{ env.IMAGE_NAME }}:${{ env.VERSION }} && break || sleep 10
          done || { echo "Manifest push failed after retries."; exit 1; }
      - name: Log Dev Visibility (Public Testing Mode)
        run: |
          echo "::notice::Container published publicly as :${{ env.VERSION }} for testing workflows only â€“ not production ready."
      - name: Ensure Container is Public (Dev Mode)
        run: gh api --method PATCH /user/packages/container/zombiekit-devcontainer/visibility \
          -f visibility=public
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Warn Not Production-Ready
        run: |
          echo "::warning::This image is public for testing and CI workflows only. DO NOT use in production environments."