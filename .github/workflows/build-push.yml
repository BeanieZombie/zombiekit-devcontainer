name: Build and Push Devcontainer Image
on:
  push:
    branches:
      - main
permissions:
  contents: read
  packages: write  # Needed to push to ghcr.io
jobs:
  build-amd64:
    if: github.event_name == 'push' && github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: ubuntu-latest  # Use latest Ubuntu version for GitHub-hosted runners
    timeout-minutes: 60  # Increase timeout to 60 minutes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Debug TARGETPLATFORM
        run: |
          echo "Platforms to build: linux/amd64"
      - name: Scan base image for vulnerabilities (ubuntu:jammy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:jammy'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Allow the build to continue despite vulnerabilities
          scanners: 'vuln'  # Use Docker for scanning, avoid containerd/podman
      - name: Build and push Docker image (AMD64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ghcr.io/beaniezombie/zombiekit-devcontainer:amd64
          # Ensure a single manifest is pushed, not a manifest list
          outputs: type=registry,oci-mediatypes=true
          cache-from: type=gha
          cache-to: type=gha,mode=max,key=${{ github.sha }}-amd64

  build-arm64:
    if: github.event_name == 'push' && github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: [self-hosted, linux, ARM64]  # Requires a self-hosted ARM64 runner with these labels
    timeout-minutes: 60  # Increase timeout to 60 minutes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Debug TARGETPLATFORM
        run: |
          echo "Platforms to build: linux/arm64"
      - name: Scan base image for vulnerabilities (ubuntu:jammy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:jammy'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Allow the build to continue despite vulnerabilities
          scanners: 'vuln'  # Use Docker for scanning, avoid containerd/podman
      - name: Build and push Docker image (ARM64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ghcr.io/beaniezombie/zombiekit-devcontainer:arm64
          # Ensure a single manifest is pushed, not a manifest list
          outputs: type=registry,oci-mediatypes=true
          cache-from: type=gha
          cache-to: type=gha,mode=max,key=${{ github.sha }}-arm64

  combine-images:
    needs: [build-amd64, build-arm64]
    if: github.event_name == 'push' && github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: ubuntu-latest  # Use latest Ubuntu version for GitHub-hosted runners
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug login
        run: |
          echo "Verifying login to GHCR..."
          docker pull --platform linux/amd64 ghcr.io/beaniezombie/zombiekit-devcontainer:amd64 || echo "Failed to pull AMD64 image"
          docker pull --platform linux/arm64 ghcr.io/beaniezombie/zombiekit-devcontainer:arm64 || echo "Failed to pull ARM64 image"

      - name: Create manifest
        run: |
          docker manifest create ghcr.io/beaniezombie/zombiekit-devcontainer:latest \
            --amend ghcr.io/beaniezombie/zombiekit-devcontainer:amd64 \
            --amend ghcr.io/beaniezombie/zombiekit-devcontainer:arm64

      - name: Debug manifest creation
        run: |
          echo "Inspecting created manifest..."
          docker manifest inspect ghcr.io/beaniezombie/zombiekit-devcontainer:latest || { echo "Manifest creation failed."; exit 1; }

      - name: Push manifest
        run: |
          docker manifest push --purge ghcr.io/beaniezombie/zombiekit-devcontainer:latest