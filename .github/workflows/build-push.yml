name: Build and Push Devcontainer Image (Pre-Production)
on:
  push:
    branches:
      - main
permissions:
  contents: read
  packages: write
  actions: read
  id-token: write
env:
  IMAGE_NAME: ghcr.io/beaniezombie/zombiekit-devcontainer
  VERSION: dev
jobs:
  build-amd64:
    if: github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Trivy Scan (ubuntu:jammy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:jammy'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          scanners: 'vuln'
      - name: Clean up previous image
        run: docker rmi ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 || true
      - name: Build & Push Docker Image (AMD64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache-amd64
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache-amd64,mode=max
      - name: Verify AMD64 Image
        run: docker manifest inspect ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 || exit 1

  build-arm64:
    if: github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: [self-hosted, linux, ARM64]
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check Docker + Buildx
        run: |
          docker info || exit 1
          docker system info || exit 1
          df -h || exit 1
          free -h || exit 1
          docker buildx version || exit 1
          docker buildx inspect || exit 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU with Retry
        run: |
          for i in {1..3}; do
            docker run --rm --privileged tonistiigi/binfmt:latest --install all && break || {
              EXIT_CODE=$?
              if [ $EXIT_CODE -eq 125 ]; then
                break
              fi
              sleep 5
            }
          done || exit 1
      - name: Trivy Scan (ubuntu:jammy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:jammy'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          scanners: 'vuln'
      - name: Clean up previous image
        run: docker rmi ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64 || true
      - name: Build & Push Docker Image (ARM64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache-arm64
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache-arm64,mode=max
      - name: Verify ARM64 Image
        run: docker manifest inspect ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64 || exit 1

  combine-images:
    needs: [build-amd64, build-arm64]
    if: github.repository == 'BeanieZombie/zombiekit-devcontainer'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU with Retry
        run: |
          for i in {1..3}; do
            docker run --rm --privileged tonistiigi/binfmt:latest --install all && break || {
              EXIT_CODE=$?
              if [ $EXIT_CODE -eq 125 ]; then
                break
              fi
              sleep 5
            }
          done || exit 1
      - name: Check Docker Info
        run: |
          docker info || exit 1
          docker ps -a || exit 1
          docker images || exit 1
          docker version || exit 1
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check GHCR Availability
        run: curl -sI https://ghcr.io || exit 1
      - name: Pull Architecture Images with Retry
        run: |
          for i in {1..5}; do
            docker pull --platform linux/amd64 ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 2>&1 && break || sleep 10
          done || exit 1
          for i in {1..5}; do
            docker pull --platform linux/arm64 ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64 2>&1 && break || sleep 10
          done || exit 1
      - name: Confirm Both Architecture Images Exist
        run: |
          docker pull ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 || exit 1
          docker pull ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64 || exit 1
      - name: List Images and Verify Registry State
        run: |
          docker images
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://ghcr.io/v2/beaniezombie/zombiekit-devcontainer/tags/list | jq
      - name: Verify Architecture Manifests
        run: |
          docker manifest inspect ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 || exit 1
          docker manifest inspect ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64 || exit 1
      - name: Create & Push Multi-Arch Manifest (`:dev`)
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            --amend ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 \
            --amend ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64 || exit 1
          for i in {1..5}; do
            docker manifest push --purge ${{ env.IMAGE_NAME }}:${{ env.VERSION }} && break || sleep 10
          done || exit 1
      - name: Create & Push Multi-Arch Manifest (`:latest`)
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:latest \
            --amend ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 \
            --amend ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-arm64 || exit 1
          for i in {1..5}; do
            docker manifest push --purge ${{ env.IMAGE_NAME }}:latest && break || sleep 10
          done || exit 1
      - name: Log Dev Visibility
        run: echo "::notice::Container published publicly as :${{ env.VERSION }} and :latest for testing only â€“ not production ready."
      - name: Ensure Container is Public
        run: gh api --method PATCH /user/packages/container/zombiekit-devcontainer/visibility -f visibility=public
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Warn Not Production-Ready
        run: echo "::warning::This image is public for testing and CI workflows only. DO NOT use in production environments."